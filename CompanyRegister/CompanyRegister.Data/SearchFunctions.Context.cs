//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyRegister.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompanyRegisterEntities4 : DbContext
    {
        public CompanyRegisterEntities4()
            : base("name=CompanyRegister")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetEmployeesByBirthDate_Result> GetEmployeesByBirthDate(Nullable<System.DateTime> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesByBirthDate_Result>("GetEmployeesByBirthDate", yearParameter);
        }
    
        public virtual ObjectResult<GetEmployeesByHireDate_Result> GetEmployeesByHireDate(Nullable<System.DateTime> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesByHireDate_Result>("GetEmployeesByHireDate", yearParameter);
        }
    
        public virtual ObjectResult<GetEmployeesByName_Result> GetEmployeesByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesByName_Result>("GetEmployeesByName", nameParameter);
        }
    
        public virtual ObjectResult<GetEmployeesBySalary_Result> GetEmployeesBySalary(Nullable<double> salary)
        {
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesBySalary_Result>("GetEmployeesBySalary", salaryParameter);
        }
    }
}
